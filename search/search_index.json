{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to basal_and_bark","text":"<p>Welcome to Basal and Bark, a spatial python package for working with forest data.</p> <ul> <li>Free software: MIT license</li> <li>Documentation: https://ZachDorm.github.io/basal_and_bark</li> </ul>"},{"location":"#features","title":"Features","text":"<ul> <li>TODO</li> </ul>"},{"location":"#credits","title":"Credits","text":"<p>This package was created with Cookiecutter and the giswqs/pypackage project template.</p>"},{"location":"basal_and_bark/","title":"basal_and_bark module","text":"<p>basal_and_bark.basal_and_bark</p>"},{"location":"basal_and_bark_folium/","title":"basal_and_bark_folium module","text":"<p>Main module.</p>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium","title":"<code> Map_Folium            (Map)         </code>","text":"<p>create the Map_Folium class of basal_and_bark</p> <p>Parameters:</p> Name Type Description Default <code>folium</code> <code>Map</code> <p>This is a folium Map instance upon which basal_and_bark's functionality is built on</p> required Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>class Map_Folium(folium.Map):\n    \"\"\"create the Map_Folium class of basal_and_bark\n\n    Args:\n        folium (Map): This is a folium Map instance upon which basal_and_bark's functionality is built on\n    \"\"\"    \n    def __init__(self, location, tiles, zoom_start, **kwargs):\n        super().__init__(location=location, tiles=tiles, zoom_start=zoom_start, **kwargs)\n\n    def add_tile_layer_folium(self, url = xyz.Esri.WorldImagery.build_url(), name=\"\", attribution=\"Esri.WorldImagery\", **kwargs):\n        \"\"\"Adds a tile layer to the map.\n        Args:\n            url (str): The URL of the tile layer.\n            name (str): The name of the tile layer.\n            attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n        \"\"\"\n        tile_layer = folium.TileLayer(\n            tiles=url,\n            attr=attribution,\n            name=name,\n            **kwargs\n        )\n        tile_layer.add_to(self)\n\n    def add_basemap(self, url = xyz.Esri.WorldImagery.build_url(), basemap=\"Esri.WorldImagery\", **kwargs):\n        \"\"\"Add a basemap from xyz.services\n\n        Args:\n            url (string, optional: URL to xyz.services map. Defaults to xyz.Esri.WorldImagery.build_url().\n            basemap (str, optional): Name of the basemap on xyz.services. Defaults to \"Esri.WorldImagery\".\n\n        Raises:\n            ValueError: If basemap does not exist.\n\n        Returns:\n            basal_and_bark map_folium: basal_and_bark map_folium with new basemap\n        \"\"\"        \n        try:\n            basemap = eval(f\"xyz.{basemap}\")\n            url = basemap.build_url()\n            attribution = basemap.attribution\n            b = self.add_tile_layer_folium(url, name = basemap.name, attribution=attribution, **kwargs)\n            return b\n\n        except:\n            raise ValueError(f\"Basemap '{basemap}' not found.\")\n\n\n    def add_raster(self, url, name=\"raster\", fit_bound = True, **kwargs):\n        \"\"\"Adds a raster to the basal_and_bark map_folium\n\n        Args:\n            url (string): URL to raster you want to use.\n            name (str, optional): Name of the raster. Defaults to \"raster\".\n            fit_bound (bool, optional): Whether the bound of the map should be fit to the raster. Defaults to True.\n        \"\"\"        \n        import httpx\n        titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind\n\n        r = httpx.get(f\"{titiler_endpoint}/cog/tilejson.json\", params = {\"url\": url,}).json()\n        bounds = r[\"bounds\"]\n\n        r = httpx.get(f\"{titiler_endpoint}/cog/info\", params = {\"url\": url,}).json()\n        tile = r[\"tiles\"][0]\n        self.add_tile_layer(url=tile, name=name, **kwargs)\n\n    def add_geojson_folium(self, data, **kwargs):\n        \"\"\"Add GeoJSON to a map_folium\n\n        Args:\n            data (GeoJSON file): GeoJSON\n\n        Returns:\n            basal_and_bark map_folium: basal_and_bark map_folium with provided data added to it\n        \"\"\"        \n        # try:\n        f = geopandas.read_file(data)\n        geo = folium.GeoJson(data=data, name=\"TN Counties\")\n        m = geo.add_to(self)\n        return m\n\n        # except:\n        #     return None\n\n\n    def add_shp_folium(self, data, **kwargs):\n        \"\"\"Add a shapefile to a map_folium\n\n    Args:\n        map_folium (basal_and_bark map_folium): This will be the map that is being worked on\n        data (any file type that is accepted by GeoData): Originally intended for vector files\n\n    Returns:\n        basal_and_bark map_folium: basal_and_bark map_folium with provided data added to it\n    \"\"\"  \n        data=data \n        f = geopandas.read_file(data)\n        geo = f[\"geometry\"].simplify(tolerance=0.001)\n        json = geo.to_json()\n        geo_j = folium.GeoJson(data=json)\n        geo_j.add_to(self)\n\n        #     for _, r in f.iterrows():\n        # # Without simplifying the representation of each borough,\n        # # the map might not be displayed\n        #      sim_geo = geopandas.GeoSeries(r['geometry'])#.simplify(tolerance=0.001)\n        #     geo_j = sim_geo.to_json()\n        #     geo_j = folium.GeoJson(data=geo_j)\n        #     geo_j.add_to(self)\n        # # geo = GeoData(geo_dataframe=f, name=\"TN Counties\")\n        # # m = map.add_layer(geo)\n        self\n\n\n\n    def add_vector_folium(self, data, **kwargs):\n        \"\"\"Accepts a file. Checks if it is a geopandas supported format. If not, then except silently.\n\n        Args:\n            data (vector data): Geopandas supported vector format.\n\n        Returns:\n            basal_and_bark map_folium: basal_and_bark map_folium with the vector data added.\n        \"\"\"        \n        count = 0\n\n        try:\n            self.add_shp_folium(data)\n        except:\n            count = count +1\n            try:\n                self.add_geojson_folium(data)\n            except:\n                count = count +1\n\n                try:\n                    json = data.to_json()\n                    geo_j = folium.GeoJson(data=json)\n                    geo_j.add_to(self)\n                except:\n                    count = count +1\n\n        # if(count==3):\n                    return \"Not a supported file type\"\n        # else:\n        #     pass\n\n\n\n\n    def add_ee_layer(self, ee_object, vis_params, name):\n        try:\n            if isinstance(ee_object, ee.image.Image):\n                map_id_dict = ee.Image(ee_object).getMapId(vis_params)\n                folium.raster_layers.TileLayer(\n                    tiles = map_id_dict['tile_fetcher'].url_format,\n                    attr ='Google Earth Engine',\n                    name=name,\n                    overlay=True,\n                    control=True\n                ).add_to(self)\n\n        except:\n            print(\"Could not display.\")\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium.add_basemap","title":"<code>add_basemap(self, url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', basemap='Esri.WorldImagery', **kwargs)</code>","text":"<p>Add a basemap from xyz.services</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>string</code> <p>URL to xyz.services map. Defaults to xyz.Esri.WorldImagery.build_url().</p> <code>'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'</code> <code>basemap</code> <code>str</code> <p>Name of the basemap on xyz.services. Defaults to \"Esri.WorldImagery\".</p> <code>'Esri.WorldImagery'</code> <p>Exceptions:</p> Type Description <code>ValueError</code> <p>If basemap does not exist.</p> <p>Returns:</p> Type Description <code>basal_and_bark map_folium</code> <p>basal_and_bark map_folium with new basemap</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def add_basemap(self, url = xyz.Esri.WorldImagery.build_url(), basemap=\"Esri.WorldImagery\", **kwargs):\n    \"\"\"Add a basemap from xyz.services\n\n    Args:\n        url (string, optional: URL to xyz.services map. Defaults to xyz.Esri.WorldImagery.build_url().\n        basemap (str, optional): Name of the basemap on xyz.services. Defaults to \"Esri.WorldImagery\".\n\n    Raises:\n        ValueError: If basemap does not exist.\n\n    Returns:\n        basal_and_bark map_folium: basal_and_bark map_folium with new basemap\n    \"\"\"        \n    try:\n        basemap = eval(f\"xyz.{basemap}\")\n        url = basemap.build_url()\n        attribution = basemap.attribution\n        b = self.add_tile_layer_folium(url, name = basemap.name, attribution=attribution, **kwargs)\n        return b\n\n    except:\n        raise ValueError(f\"Basemap '{basemap}' not found.\")\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium.add_geojson_folium","title":"<code>add_geojson_folium(self, data, **kwargs)</code>","text":"<p>Add GeoJSON to a map_folium</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>GeoJSON file</code> <p>GeoJSON</p> required <p>Returns:</p> Type Description <code>basal_and_bark map_folium</code> <p>basal_and_bark map_folium with provided data added to it</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def add_geojson_folium(self, data, **kwargs):\n    \"\"\"Add GeoJSON to a map_folium\n\n    Args:\n        data (GeoJSON file): GeoJSON\n\n    Returns:\n        basal_and_bark map_folium: basal_and_bark map_folium with provided data added to it\n    \"\"\"        \n    # try:\n    f = geopandas.read_file(data)\n    geo = folium.GeoJson(data=data, name=\"TN Counties\")\n    m = geo.add_to(self)\n    return m\n\n    # except:\n    #     return None\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium.add_raster","title":"<code>add_raster(self, url, name='raster', fit_bound=True, **kwargs)</code>","text":"<p>Adds a raster to the basal_and_bark map_folium</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>string</code> <p>URL to raster you want to use.</p> required <code>name</code> <code>str</code> <p>Name of the raster. Defaults to \"raster\".</p> <code>'raster'</code> <code>fit_bound</code> <code>bool</code> <p>Whether the bound of the map should be fit to the raster. Defaults to True.</p> <code>True</code> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def add_raster(self, url, name=\"raster\", fit_bound = True, **kwargs):\n    \"\"\"Adds a raster to the basal_and_bark map_folium\n\n    Args:\n        url (string): URL to raster you want to use.\n        name (str, optional): Name of the raster. Defaults to \"raster\".\n        fit_bound (bool, optional): Whether the bound of the map should be fit to the raster. Defaults to True.\n    \"\"\"        \n    import httpx\n    titiler_endpoint = \"https://titiler.xyz\"  # Developmentseed Demo endpoint. Please be kind\n\n    r = httpx.get(f\"{titiler_endpoint}/cog/tilejson.json\", params = {\"url\": url,}).json()\n    bounds = r[\"bounds\"]\n\n    r = httpx.get(f\"{titiler_endpoint}/cog/info\", params = {\"url\": url,}).json()\n    tile = r[\"tiles\"][0]\n    self.add_tile_layer(url=tile, name=name, **kwargs)\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium.add_shp_folium","title":"<code>add_shp_folium(self, data, **kwargs)</code>","text":"<p>Add a shapefile to a map_folium</p> <p>Parameters:</p> Name Type Description Default <code>map_folium</code> <code>basal_and_bark map_folium</code> <p>This will be the map that is being worked on</p> required <code>data</code> <code>any file type that is accepted by GeoData</code> <p>Originally intended for vector files</p> required <p>Returns:</p> Type Description <code>basal_and_bark map_folium</code> <p>basal_and_bark map_folium with provided data added to it</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def add_shp_folium(self, data, **kwargs):\n    \"\"\"Add a shapefile to a map_folium\n\nArgs:\n    map_folium (basal_and_bark map_folium): This will be the map that is being worked on\n    data (any file type that is accepted by GeoData): Originally intended for vector files\n\nReturns:\n    basal_and_bark map_folium: basal_and_bark map_folium with provided data added to it\n\"\"\"  \n    data=data \n    f = geopandas.read_file(data)\n    geo = f[\"geometry\"].simplify(tolerance=0.001)\n    json = geo.to_json()\n    geo_j = folium.GeoJson(data=json)\n    geo_j.add_to(self)\n\n    #     for _, r in f.iterrows():\n    # # Without simplifying the representation of each borough,\n    # # the map might not be displayed\n    #      sim_geo = geopandas.GeoSeries(r['geometry'])#.simplify(tolerance=0.001)\n    #     geo_j = sim_geo.to_json()\n    #     geo_j = folium.GeoJson(data=geo_j)\n    #     geo_j.add_to(self)\n    # # geo = GeoData(geo_dataframe=f, name=\"TN Counties\")\n    # # m = map.add_layer(geo)\n    self\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium.add_tile_layer_folium","title":"<code>add_tile_layer_folium(self, url='https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}', name='', attribution='Esri.WorldImagery', **kwargs)</code>","text":"<p>Adds a tile layer to the map.</p> <p>Parameters:</p> Name Type Description Default <code>url</code> <code>str</code> <p>The URL of the tile layer.</p> <code>'https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'</code> <code>name</code> <code>str</code> <p>The name of the tile layer.</p> <code>''</code> <code>attribution</code> <code>str</code> <p>The attribution of the tile layer. Defaults to \"\".</p> <code>'Esri.WorldImagery'</code> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def add_tile_layer_folium(self, url = xyz.Esri.WorldImagery.build_url(), name=\"\", attribution=\"Esri.WorldImagery\", **kwargs):\n    \"\"\"Adds a tile layer to the map.\n    Args:\n        url (str): The URL of the tile layer.\n        name (str): The name of the tile layer.\n        attribution (str, optional): The attribution of the tile layer. Defaults to \"\".\n    \"\"\"\n    tile_layer = folium.TileLayer(\n        tiles=url,\n        attr=attribution,\n        name=name,\n        **kwargs\n    )\n    tile_layer.add_to(self)\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.Map_Folium.add_vector_folium","title":"<code>add_vector_folium(self, data, **kwargs)</code>","text":"<p>Accepts a file. Checks if it is a geopandas supported format. If not, then except silently.</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>vector data</code> <p>Geopandas supported vector format.</p> required <p>Returns:</p> Type Description <code>basal_and_bark map_folium</code> <p>basal_and_bark map_folium with the vector data added.</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def add_vector_folium(self, data, **kwargs):\n    \"\"\"Accepts a file. Checks if it is a geopandas supported format. If not, then except silently.\n\n    Args:\n        data (vector data): Geopandas supported vector format.\n\n    Returns:\n        basal_and_bark map_folium: basal_and_bark map_folium with the vector data added.\n    \"\"\"        \n    count = 0\n\n    try:\n        self.add_shp_folium(data)\n    except:\n        count = count +1\n        try:\n            self.add_geojson_folium(data)\n        except:\n            count = count +1\n\n            try:\n                json = data.to_json()\n                geo_j = folium.GeoJson(data=json)\n                geo_j.add_to(self)\n            except:\n                count = count +1\n\n    # if(count==3):\n                return \"Not a supported file type\"\n    # else:\n    #     pass\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.generate_lucky_number","title":"<code>generate_lucky_number(length=1)</code>","text":"<p>Generates a lucky number of given length</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>description. Defaults to 1.</p> <code>1</code> <p>Returns:</p> Type Description <code>str</code> <p>the generated string</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def generate_lucky_number(length=1):\n    \"\"\"Generates a lucky number of given length\n\n    Args:\n        length (int, optional): _description_. Defaults to 1.\n\n    Returns:\n        str: the generated string\n    \"\"\"    \n    numbers = ['1','2','3','4','5','6','7','8','9','0']\n    result_str = ''.join(random.choice(numbers) for i in range(length))\n    return result_str\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.generate_random_string","title":"<code>generate_random_string(length)</code>","text":"<p>Generates a random string</p> <p>Parameters:</p> Name Type Description Default <code>length</code> <code>int</code> <p>length of string of random characters</p> required <p>Returns:</p> Type Description <code>string</code> <p>string of random characters of specified length</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def generate_random_string(length):\n    \"\"\"Generates a random string\n\n    Args:\n        length (int): length of string of random characters\n\n    Returns:\n        string: string of random characters of specified length\n    \"\"\"    \n    # letters = string.ascii_lowercase\n    # result_str = ''.join(random.choice(letters) for i in range(length))\n    # return result_str\n    return \"test\"\n</code></pre>"},{"location":"basal_and_bark_folium/#basal_and_bark.basal_and_bark_folium.view_data","title":"<code>view_data(data, **kwargs)</code>","text":"<p>View and explore data without adding it to a map</p> <p>Parameters:</p> Name Type Description Default <code>data</code> <code>shp file</code> <p>spatial data to be viewed</p> required <p>Returns:</p> Type Description <code>ipyleaflet map</code> <p>A map viewport for viewing and exploring data</p> Source code in <code>basal_and_bark/basal_and_bark_folium.py</code> <pre><code>def view_data(data, **kwargs):\n    \"\"\"View and explore data without adding it to a map\n\n    Args:\n        data (shp file): spatial data to be viewed\n\n    Returns:\n        ipyleaflet map: A map viewport for viewing and exploring data\n    \"\"\"    \n    try:\n        add_gdf = geopandas.read_file(data)\n        return add_gdf.explore()\n\n    except:\n        return None\n</code></pre>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#v009-june-27-2024","title":"v0.0.9 - June 27, 2024","text":"<p>Improvement:</p> <ul> <li>Add GEE functionality to folium module</li> </ul>"},{"location":"changelog/#v008-may-9-2023","title":"v0.0.8 - May 9, 2023","text":"<p>Improvement:</p> <ul> <li>Handled error if user selects outside of states when trying to retrieve API data.</li> </ul>"},{"location":"changelog/#v007-may-6-2023","title":"v0.0.7 - May 6, 2023","text":"<p>Improvement:</p> <ul> <li>Improving documentation.</li> </ul>"},{"location":"changelog/#v006-may-6-2023","title":"v0.0.6 - May 6, 2023","text":"<p>Improvement:</p> <ul> <li>Both FIADB-API and GEE functionalities were added along with new interactive widgets to explore forestry datasets.</li> </ul>"},{"location":"changelog/#v005-april-27-2023","title":"v0.0.5 - April 27, 2023","text":"<p>Improvement:</p> <ul> <li>Added a function that, when called, adds a dropdown widget that provides options for a user to select a basemap.</li> </ul> <p>New Features:</p> <ul> <li>add_interactive_basemap()</li> </ul>"},{"location":"changelog/#v004-april-20-2023","title":"v0.0.4 - April 20, 2023","text":"<p>Improvement:</p> <ul> <li>Added methods for adding raster data and a static image to map.</li> </ul> <p>New Features:</p> <ul> <li>add_raster(url)</li> <li>add_image(url)</li> </ul>"},{"location":"changelog/#v003-april-12-2023","title":"v0.0.3 - April 12, 2023","text":"<p>Improvement:</p> <ul> <li>Added methods ffor adding vector data, and added new folium class module.</li> </ul> <p>New Features:</p> <ul> <li>Map(ipyleaflet) class</li> <li>Map_Folium(folium.map) class</li> <li>For each class added add_shp(), add_geojson(), add_vector()</li> </ul>"},{"location":"changelog/#v002-april-5-2023","title":"v0.0.2 - April 5, 2023","text":"<p>Improvement:</p> <ul> <li>Added some useful functions to package and a Google Colab notebook to exhibit the use of these.</li> </ul> <p>New Features:</p> <ul> <li>add_data()</li> <li>add_layer_control()</li> <li>view_data()</li> <li>Map()</li> </ul>"},{"location":"changelog/#v001-date","title":"v0.0.1 - Date","text":"<p>Improvement:</p> <ul> <li>TBD</li> </ul> <p>New Features:</p> <ul> <li>TBD</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given.</p> <p>You can contribute in many ways:</p>"},{"location":"contributing/#types-of-contributions","title":"Types of Contributions","text":""},{"location":"contributing/#report-bugs","title":"Report Bugs","text":"<p>Report bugs at https://github.com/ZachDorm/basal_and_bark/issues.</p> <p>If you are reporting a bug, please include:</p> <ul> <li>Your operating system name and version.</li> <li>Any details about your local setup that might be helpful in troubleshooting.</li> <li>Detailed steps to reproduce the bug.</li> </ul>"},{"location":"contributing/#fix-bugs","title":"Fix Bugs","text":"<p>Look through the GitHub issues for bugs. Anything tagged with <code>bug</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#implement-features","title":"Implement Features","text":"<p>Look through the GitHub issues for features. Anything tagged with <code>enhancement</code> and <code>help wanted</code> is open to whoever wants to implement it.</p>"},{"location":"contributing/#write-documentation","title":"Write Documentation","text":"<p>basal_and_bark could always use more documentation, whether as part of the official basal_and_bark docs, in docstrings, or even on the web in blog posts, articles, and such.</p>"},{"location":"contributing/#submit-feedback","title":"Submit Feedback","text":"<p>The best way to send feedback is to file an issue at https://github.com/ZachDorm/basal_and_bark/issues.</p> <p>If you are proposing a feature:</p> <ul> <li>Explain in detail how it would work.</li> <li>Keep the scope as narrow as possible, to make it easier to implement.</li> <li>Remember that this is a volunteer-driven project, and that contributions are welcome :)</li> </ul>"},{"location":"contributing/#get-started","title":"Get Started!","text":"<p>Ready to contribute? Here's how to set up basal_and_bark for local development.</p> <ol> <li> <p>Fork the basal_and_bark repo on GitHub.</p> </li> <li> <p>Clone your fork locally:</p> <pre><code>$ git clone git@github.com:your_name_here/basal_and_bark.git\n</code></pre> </li> <li> <p>Install your local copy into a virtualenv. Assuming you have     virtualenvwrapper installed, this is how you set up your fork for     local development:</p> <pre><code>$ mkvirtualenv basal_and_bark\n$ cd basal_and_bark/\n$ python setup.py develop\n</code></pre> </li> <li> <p>Create a branch for local development:</p> <pre><code>$ git checkout -b name-of-your-bugfix-or-feature\n</code></pre> <p>Now you can make your changes locally.</p> </li> <li> <p>When you're done making changes, check that your changes pass flake8     and the tests, including testing other Python versions with tox:</p> <pre><code>$ flake8 basal_and_bark tests\n$ python setup.py test or pytest\n$ tox\n</code></pre> <p>To get flake8 and tox, just pip install them into your virtualenv.</p> </li> <li> <p>Commit your changes and push your branch to GitHub:</p> <pre><code>$ git add .\n$ git commit -m \"Your detailed description of your changes.\"\n$ git push origin name-of-your-bugfix-or-feature\n</code></pre> </li> <li> <p>Submit a pull request through the GitHub website.</p> </li> </ol>"},{"location":"contributing/#pull-request-guidelines","title":"Pull Request Guidelines","text":"<p>Before you submit a pull request, check that it meets these guidelines:</p> <ol> <li>The pull request should include tests.</li> <li>If the pull request adds functionality, the docs should be updated.     Put your new functionality into a function with a docstring, and add     the feature to the list in README.rst.</li> <li>The pull request should work for Python 3.5, 3.6, 3.7 and 3.8, and     for PyPy. Check https://github.com/ZachDorm/basal_and_bark/pull_requests and make sure that the tests pass for all     supported Python versions.</li> </ol>"},{"location":"faq/","title":"FAQ","text":""},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install basal_and_bark, run this command in your terminal:</p> <pre><code>pip install basal_and_bark\n</code></pre> <p>This is the preferred method to install basal_and_bark, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-sources","title":"From sources","text":"<p>The sources for basal_and_bark can be downloaded from the Github repo.</p> <p>You can clone the public repository:</p> <pre><code>git clone git://github.com/ZachDorm/basal_and_bark\n</code></pre>"},{"location":"usage/","title":"Usage","text":"<p>To use basal_and_bark in a project:</p> <pre><code>import basal_and_bark\n</code></pre>"},{"location":"examples/Final/","title":"Final","text":"In\u00a0[\u00a0]: Copied! <pre>#%pip install basal_and_bark\n</pre> #%pip install basal_and_bark In\u00a0[1]: Copied! <pre>import pandas\nimport basal_and_bark\nfrom basal_and_bark import basal_and_bark as basal\nimport ipywidgets as widgets\nimport ipyleaflet\nfrom ipyleaflet import Marker, Widget, WidgetControl, MarkerCluster\nimport geopandas\nfrom ipyfilechooser import FileChooser\n</pre> import pandas import basal_and_bark from basal_and_bark import basal_and_bark as basal import ipywidgets as widgets import ipyleaflet from ipyleaflet import Marker, Widget, WidgetControl, MarkerCluster import geopandas from ipyfilechooser import FileChooser In\u00a0[2]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) In\u00a0[\u00a0]: Copied! <pre>leaflet_map.csv_to_shp('https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv')\n</pre> leaflet_map.csv_to_shp('https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv') In\u00a0[\u00a0]: Copied! <pre>leaflet_map.csv_to_geojson('https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv')\n</pre> leaflet_map.csv_to_geojson('https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv') In\u00a0[3]: Copied! <pre>leaflet_map\n</pre> leaflet_map <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[5]: Copied! <pre>leaflet_map.add_points_from_csv(in_csv='https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv')\n</pre> leaflet_map.add_points_from_csv(in_csv='https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv') <pre>\n---------------------------------------------------------------------------\nTypeError                                 Traceback (most recent call last)\nCell In[5], line 1\n----&gt; 1 leaflet_map.add_points_from_csv(in_csv='https://raw.githubusercontent.com/giswqs/geosdemo/master/docs/examples/data/world_cities.csv')\n\nFile c:\\users\\zachd\\onedrive\\desktop\\geog 510 repos\\basal_and_bark\\basal_and_bark\\basal_and_bark.py:621, in Map.add_points_from_csv(self, in_csv, x, y, label, layer_name)\n    620 def add_points_from_csv(self, in_csv, x=\"longitude\", y=\"latitude\", label=None, layer_name=\"Marker cluster\"):\n--&gt; 621     coords = in_csv[['longitude', 'latitude']]\n    622     marker_list = [Marker(location=(0,0))]*len(coords)\n    624     for i in range(0,len(coords)):\n\nTypeError: string indices must be integers</pre> <p>So, completely lost on this error, it works fine when it is in a notebook, then when I put it in the .py it throws this.</p> In\u00a0[\u00a0]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_widget.clear_output()\nbasemap_ctrl = WidgetControl(widget=output_widget, position='bottomright')\nleaflet_map.add_control(basemap_ctrl)\n\n# dropdown = widgets.Dropdown(options = [\"Topo\", \"ShadeRelief\", \"Gray\"], \n#             value=None,\n#             description='Basemap',\n#             )\n\nfc = FileChooser('/')\nclose_button = widgets.ToggleButton(\n            value=True,\n            tooltip=\"Open or close basemap selector\",\n            icon=\"desktop\",\n            button_style=\"primary\",\n            #layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),\n        )\nbutton_1 = widgets.Text(\n    value='Enter URL',\n    placeholder='Type something',\n    description='String:',\n    disabled=False   \n)\n\nsubmit_button=widgets.Button(description='Submit text',button_style='success')\n\nwith output_widget:\n    display(button_1, submit_button, fc, fc.value)\ntry:\n    leaflet_map.add_points_from_csv(fc.value)\nexcept:\n    print(\"Select a file\")\n#button_1.on_submit(leaflet_map.add_points_from_csv(button_1.value))\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_widget.clear_output() basemap_ctrl = WidgetControl(widget=output_widget, position='bottomright') leaflet_map.add_control(basemap_ctrl)  # dropdown = widgets.Dropdown(options = [\"Topo\", \"ShadeRelief\", \"Gray\"],  #             value=None, #             description='Basemap', #             )  fc = FileChooser('/') close_button = widgets.ToggleButton(             value=True,             tooltip=\"Open or close basemap selector\",             icon=\"desktop\",             button_style=\"primary\",             #layout=widgets.Layout(height=\"28px\", width=\"28px\", padding=padding),         ) button_1 = widgets.Text(     value='Enter URL',     placeholder='Type something',     description='String:',     disabled=False    )  submit_button=widgets.Button(description='Submit text',button_style='success')  with output_widget:     display(button_1, submit_button, fc, fc.value) try:     leaflet_map.add_points_from_csv(fc.value) except:     print(\"Select a file\") #button_1.on_submit(leaflet_map.add_points_from_csv(button_1.value))  In\u00a0[\u00a0]: Copied! <pre>def add_csv(change):\n    #csv = pandas.read_csv(change[\"new\"])\n    print(\"yea\")\nfc.observe(add_csv)\n</pre> def add_csv(change):     #csv = pandas.read_csv(change[\"new\"])     print(\"yea\") fc.observe(add_csv)"},{"location":"examples/Lab%207/","title":"Lab 7","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install basal_and_bark\n%pip install geopandas\n</pre> %pip install basal_and_bark %pip install geopandas In\u00a0[1]: Copied! <pre>import basal_and_bark\n</pre> import basal_and_bark In\u00a0[2]: Copied! <pre>from basal_and_bark import basal_and_bark_folium as fol\nfrom basal_and_bark import basal_and_bark as basal\n</pre> from basal_and_bark import basal_and_bark_folium as fol from basal_and_bark import basal_and_bark as basal <p>For ease of viewing, this will be the viewing area of most of the examples.</p> In\u00a0[3]: Copied! <pre>import geopandas\nf = geopandas.read_file(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\")\nfirst = f.total_bounds[0]\nsecond = f.total_bounds[1]\nthird = f.total_bounds[2]\nfourth = f.total_bounds[3]\n</pre> import geopandas f = geopandas.read_file(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\") first = f.total_bounds[0] second = f.total_bounds[1] third = f.total_bounds[2] fourth = f.total_bounds[3] In\u00a0[4]: Copied! <pre>folium_map = fol.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13)\n</pre> folium_map = fol.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13) <p>Add GeoJSON to Map_Folium object</p> In\u00a0[5]: Copied! <pre>folium_map.add_geojson_folium(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\")\n</pre> folium_map.add_geojson_folium(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\") Out[5]: <pre>&lt;folium.features.GeoJson at 0x18db9381180&gt;</pre> In\u00a0[6]: Copied! <pre>folium_map.fit_bounds([[second, third], [fourth, first]])\nfolium_map\n</pre> folium_map.fit_bounds([[second, third], [fourth, first]]) folium_map Out[6]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>Add shapefile to Map_Folium object</p> In\u00a0[\u00a0]: Copied! <pre>folium_map = fol.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13)\nfolium_map.fit_bounds([[second, third], [fourth, first]])\n</pre> folium_map = fol.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13) folium_map.fit_bounds([[second, third], [fourth, first]]) In\u00a0[\u00a0]: Copied! <pre>folium_map.add_shp_folium(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\")\nfolium_map\n</pre> folium_map.add_shp_folium(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\") folium_map <p>Add basemap to Map_Folium object</p> In\u00a0[\u00a0]: Copied! <pre>folium_map.add_basemap(basemap=\"OpenTopoMap\")\nfolium_map\n</pre> folium_map.add_basemap(basemap=\"OpenTopoMap\") folium_map <p>Add any geopandas supported vector object to Map_Folium object. This can also be passed the same input as add_shp_folium() or add_geojson_folium().</p> In\u00a0[7]: Copied! <pre>f = geopandas.read_file(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\")\n</pre> f = geopandas.read_file(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\")  In\u00a0[8]: Copied! <pre>folium_map = fol.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13)\n</pre> folium_map = fol.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13) In\u00a0[9]: Copied! <pre>folium_map.add_vector_folium(f)\nfolium_map.fit_bounds([[second, third], [fourth, first]])\nfolium_map\n</pre> folium_map.add_vector_folium(f) folium_map.fit_bounds([[second, third], [fourth, first]]) folium_map Out[9]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook <p>add_vector_folium excepts silently when passed a data format that is not geopandas supported</p> In\u00a0[10]: Copied! <pre>folium_map.add_vector_folium(\"https://github.com/opengeos/leafmap/raw/master/examples/data/us_states.kmz\")\n</pre> folium_map.add_vector_folium(\"https://github.com/opengeos/leafmap/raw/master/examples/data/us_states.kmz\") Out[10]: <pre>'Not a supported file type'</pre> In\u00a0[\u00a0]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) <p>Add shapefile to Map(ipyleaflet) object</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_shp(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\")\nleaflet_map.add_layer_control()\n</pre> leaflet_map.add_shp(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\") leaflet_map.add_layer_control()  In\u00a0[\u00a0]: Copied! <pre>leaflet_map\n</pre> leaflet_map <p>Fit to bounds of file</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map.fit_bounds([[second, third], [fourth, first]])\n</pre> leaflet_map.fit_bounds([[second, third], [fourth, first]]) <p>Add GeoJSON to Map(ipyleaflet) object</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_geojson(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\")\n</pre> leaflet_map.add_geojson(\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/TIGER_Line_2018_Tennessee_Counties.geojson\") In\u00a0[\u00a0]: Copied! <pre>leaflet_map\n</pre> leaflet_map <p>Add default basemap from xyz.</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_basemap()\n</pre> leaflet_map.add_basemap() <p>Add user-specified basemap from xyz.</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_basemap(basemap=\"OpenTopoMap\")\nleaflet_map\n</pre> leaflet_map.add_basemap(basemap=\"OpenTopoMap\") leaflet_map <p>Add any geopandas supported vector object to Map(ipyleaflet) object</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) In\u00a0[\u00a0]: Copied! <pre>f = geopandas.read_file(\"https://github.com/opengeos/leafmap/raw/master/examples/data/countries.gpkg\")\n</pre> f = geopandas.read_file(\"https://github.com/opengeos/leafmap/raw/master/examples/data/countries.gpkg\") In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_vector(f)\n</pre> leaflet_map.add_vector(f) In\u00a0[\u00a0]: Copied! <pre>leaflet_map\n</pre> leaflet_map <p>add_vector() excepts silently when passed a file type that is not supported by geopandas</p> In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_vector(\"https://github.com/opengeos/leafmap/raw/master/examples/data/us_states.kmz\")\n</pre> leaflet_map.add_vector(\"https://github.com/opengeos/leafmap/raw/master/examples/data/us_states.kmz\")"},{"location":"examples/Lab%207/#lab-7","title":"Lab 7\u00b6","text":"<p>This is a notebook with two parts. It showcases the two different classes of the basal_and_bark.py package. The first section showcases that functionality of the Folium_Map class built on folium and the second section showcases the functionality of the Map class, built on ipyleaflet.</p> <p>Outputs have been suppressed for timely loading. Please open this notebook and explore the functionalities with outputs of different maps.</p>"},{"location":"examples/Lab%207/#map_folium-class","title":"Map_Folium Class\u00b6","text":""},{"location":"examples/Lab%207/#mapipyleaflet-class","title":"Map(ipyleaflet) Class\u00b6","text":""},{"location":"examples/basal_and_bark/","title":"basal_and_bark module","text":"<p>basal_and_bark.basal_and_bark</p>"},{"location":"examples/change_basemap/","title":"Change basemap","text":"In\u00a0[1]: Copied! <pre>%pip install basal_and_bark\nfrom basal_and_bark import basal_and_bark as basal\n</pre> %pip install basal_and_bark from basal_and_bark import basal_and_bark as basal In\u00a0[2]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) In\u00a0[3]: Copied! <pre>leaflet_map\n</pre> leaflet_map <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> In\u00a0[4]: Copied! <pre>leaflet_map.add_interactive_basemap()\n</pre> leaflet_map.add_interactive_basemap()"},{"location":"examples/fia_db/","title":"Fia db","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install basal_and_bark\n</pre> %pip install basal_and_bark In\u00a0[1]: Copied! <pre>import basal_and_bark\nfrom basal_and_bark import basal_and_bark as basal\nimport ipyleaflet\nfrom ipyleaflet import WidgetControl\nimport ipywidgets\nfrom ipywidgets import HTML, widgets\n</pre> import basal_and_bark from basal_and_bark import basal_and_bark as basal import ipyleaflet from ipyleaflet import WidgetControl import ipywidgets from ipywidgets import HTML, widgets <p>Set up the Google Earth Engine (GEE) session. If you do not have a Google Earth Engine account, you can create one and authenticate it in the following code block. If you do not wish to make a GEE account, comment out the next block, second to last line of code: print(leaflet_map.addGEEData(county))</p> <p>There are additional functionalities to this package outside of what can be done using GEE, although it is cooler with GEE.</p> In\u00a0[2]: Copied! <pre>import ee\nee.Authenticate()\n</pre> import ee ee.Authenticate() <p>To authorize access needed by Earth Engine, open the following         URL in a web browser and follow the instructions:</p> <p>https://code.earthengine.google.com/client-auth?scopes=https%3A//www.googleapis.com/auth/earthengine%20https%3A//www.googleapis.com/auth/devstorage.full_control&amp;request_id=VVPU4jj0Hr8CqhCV4WNFBDWeziY6W8-rlY3xsyxUVe4&amp;tc=fiHrBRclKxbGOTVFTKPt6XuN72Qpb8Ovpec3FKXTI2A&amp;cc=qhZe0FnD96WERNgJjj8dkTcIdHGsGoY1pilHcz-Je-0</p> <p>The authorization workflow will generate a code, which you should paste in the box below.</p> <pre>\nSuccessfully saved authorization token.\n</pre> <p>Next, setup a simple basal_and_bark Map() environment to show functionality of the package in.</p> In\u00a0[3]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) <pre>       ESTIMATE\n0  1.532357e+07\n1  5.771219e+05\n2  5.745549e+03\n3  9.782071e+04\n4  9.251352e+06\n5  1.213648e+05\n6  1.998276e+06\nThe above table are estimates for 6 different categories of land, as specified by USFS: 'Timberland', 'Reserved', 'Other Forestland', 'Nonforest', 'Non-Census Water', 'Census Water', 'Other'\nThe table below contains summary statistics of the canopy cover in the Hansen et al Forest Change dataset.\n</pre> <pre>*** Earth Engine *** Share your feedback by taking our Annual Developer Satisfaction Survey: https://google.qualtrics.com/jfe/form/SV_doiqkQG3NJ1t8IS?source=API\n</pre> <pre>       GEEMap Data\nmax   1.000000e+02\nmean  5.797900e+01\nmin   0.000000e+00\nstd   4.493400e+01\nsum   9.013637e+09\n</pre> <pre>       ESTIMATE\n0  1.804803e+07\n1  6.093884e+05\n2  2.706504e+04\n3  4.040822e+04\n4  1.223426e+07\n5  1.606379e+05\n6  3.324307e+06\nThe above table are estimates for 6 different categories of land, as specified by USFS: 'Timberland', 'Reserved', 'Other Forestland', 'Nonforest', 'Non-Census Water', 'Census Water', 'Other'\nThe table below contains summary statistics of the canopy cover in the Hansen et al Forest Change dataset.\n       GEEMap Data\nmax   1.000000e+02\nmean  5.254678e+01\nmin   0.000000e+00\nstd   4.517764e+01\nsum   1.002224e+10\n</pre> In\u00a0[4]: Copied! <pre>leaflet_map.add_layer_control()\n</pre> leaflet_map.add_layer_control() In\u00a0[5]: Copied! <pre>leaflet_map\n</pre> leaflet_map <pre>Map(center=[40, -100], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title', 'zoom_out_t\u2026</pre> <p>The addRefData() function loads in a shp file of the states for data aggregation. This is specific to states currently. Future work will be looking into potential uses of custom scales for examining forestry data in this package.</p> In\u00a0[6]: Copied! <pre>states = leaflet_map.addRefData()\n</pre> states = leaflet_map.addRefData()  <p>Setup an output widget that will house a dropdown menu of years, from which the user can select the year they want to get FIA estimates for.</p> In\u00a0[7]: Copied! <pre>output_widget = widgets.Output(layout={'border': '1px solid black'})\noutput_widget.clear_output()\nctrl = WidgetControl(widget=output_widget, position='bottomright')\nleaflet_map.add_control(ctrl)\n\ndropdown = widgets.Dropdown(\n            options = [\"2018\", \"2019\", \"2020\", \"2021\"], \n            value=\"2020\",\n            description='Year',\n            )\n\nwith output_widget:\n            display(dropdown)\n</pre> output_widget = widgets.Output(layout={'border': '1px solid black'}) output_widget.clear_output() ctrl = WidgetControl(widget=output_widget, position='bottomright') leaflet_map.add_control(ctrl)  dropdown = widgets.Dropdown(             options = [\"2018\", \"2019\", \"2020\", \"2021\"],              value=\"2020\",             description='Year',             )  with output_widget:             display(dropdown) <p>This function activates when the user clicks a location on the map - on_interaction(handle_click). A point is added to the map at the location of the click makePointsFromClick(). This location data is then used to determine which state the user clicked within findInt(). Then FIA estimates are returned for the state the user clicked in getAPIData(). Additionally, the Hansen et al forestry data available on GEE is clipped to the state the user clicked in and plotted on the map addGEEData(). Summary statistics of this clipped data is also returned. This gives the user two different representations of the state of forests in the state they clicked in.</p> In\u00a0[8]: Copied! <pre>def handle_click(**kwargs):\n\n    if kwargs.get('type') == 'click':\n        output_widget.clear_output()\n        #leaflet_map.add_layer(Marker(location=kwargs.get('coordinates')))\n\n        gdf = leaflet_map.makePointsFromClick(kwargs.get('coordinates'))\n\n        state = leaflet_map.findInt(states, gdf)\n        \n        with output_widget:\n            display(dropdown)\n            print(state)\n        print(leaflet_map.getAPIdata(state, dropdown.value))#['ESTIMATE'])\n        print(\"The above table are estimates for 6 different categories of land, as specified by USFS: \"+ \n              \"'Timberland', 'Reserved', 'Other Forestland', 'Nonforest', 'Non-Census Water', 'Census Water', 'Other'\")\n        print(\"The table below contains summary statistics of the canopy cover in the Hansen et al Forest Change dataset.\")\n        print(leaflet_map.addGEEData(state))\n\nleaflet_map.on_interaction(handle_click)\n</pre> def handle_click(**kwargs):      if kwargs.get('type') == 'click':         output_widget.clear_output()         #leaflet_map.add_layer(Marker(location=kwargs.get('coordinates')))          gdf = leaflet_map.makePointsFromClick(kwargs.get('coordinates'))          state = leaflet_map.findInt(states, gdf)                  with output_widget:             display(dropdown)             print(state)         print(leaflet_map.getAPIdata(state, dropdown.value))#['ESTIMATE'])         print(\"The above table are estimates for 6 different categories of land, as specified by USFS: \"+                \"'Timberland', 'Reserved', 'Other Forestland', 'Nonforest', 'Non-Census Water', 'Census Water', 'Other'\")         print(\"The table below contains summary statistics of the canopy cover in the Hansen et al Forest Change dataset.\")         print(leaflet_map.addGEEData(state))  leaflet_map.on_interaction(handle_click)"},{"location":"examples/folium/","title":"Folium","text":"In\u00a0[1]: Copied! <pre>import folium\nimport geemap\nimport ee\nimport basal_and_bark\nfrom basal_and_bark import basal_and_bark_folium as basal_folium\n</pre> import folium import geemap import ee import basal_and_bark from basal_and_bark import basal_and_bark_folium as basal_folium   In\u00a0[4]: Copied! <pre>ee.Authenticate()\n</pre> ee.Authenticate()  <p>To authorize access needed by Earth Engine, open the following         URL in a web browser and follow the instructions:</p> <p>https://code.earthengine.google.com/client-auth?scopes=https%3A//www.googleapis.com/auth/earthengine%20https%3A//www.googleapis.com/auth/devstorage.full_control&amp;request_id=gN1_wfxsSK3mOOhDgNxoERNeRKjWAnGzVTCQzDkp3og&amp;tc=_jk5KrFjaCU2ASHvxKcu4NyCYo9mhoZO-eO-JkxxhfE&amp;cc=rxsrldOSiQs-tYZnQmHiLSt92wp6kXpnV0zwShLkH_A</p> <p>The authorization workflow will generate a code, which you should paste in the box below.</p> <pre>\nSuccessfully saved authorization token.\n</pre> In\u00a0[2]: Copied! <pre>ee.Initialize(project=\"ee-zachdorm\")\n</pre> ee.Initialize(project=\"ee-zachdorm\") In\u00a0[3]: Copied! <pre>m=basal_folium.Map_Folium(location=[32,42], tiles=\"\", zoom_start=10)\ndem = ee.Image('USGS/SRTMGL1_003')\n\nvis_params = {\n  'min': 0,\n  'max': 4000,\n  'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}\n\n\nm.add_ee_layer(dem.updateMask(dem.gt(0)), vis_params, 'DEM')\n\nm\n</pre> m=basal_folium.Map_Folium(location=[32,42], tiles=\"\", zoom_start=10) dem = ee.Image('USGS/SRTMGL1_003')  vis_params = {   'min': 0,   'max': 4000,   'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}   m.add_ee_layer(dem.updateMask(dem.gt(0)), vis_params, 'DEM')  m Out[3]: Make this Notebook Trusted to load map: File -&gt; Trust Notebook"},{"location":"examples/geemap/","title":"Geemap","text":"In\u00a0[2]: Copied! <pre>import basal_and_bark\nfrom basal_and_bark import basal_and_bark as basal\nfrom basal_and_bark import basal_and_bark_folium as basal_folium\nimport geemap\nimport ee\nimport ipyleaflet\nfrom ipyleaflet import TileLayer\n</pre> import basal_and_bark from basal_and_bark import basal_and_bark as basal from basal_and_bark import basal_and_bark_folium as basal_folium import geemap import ee import ipyleaflet from ipyleaflet import TileLayer In\u00a0[\u00a0]: Copied! <pre>m = geemap.Map()\n</pre> m = geemap.Map() In\u00a0[\u00a0]: Copied! <pre>ee.Initialize()\n# data = ee.Image('')\nstates = ee.FeatureCollection(\"TIGER/2018/States\")\n</pre> ee.Initialize() # data = ee.Image('') states = ee.FeatureCollection(\"TIGER/2018/States\") In\u00a0[\u00a0]: Copied! <pre>st = states.filter(ee.Filter.eq('STUSPS', 'AL'))\n</pre> st = states.filter(ee.Filter.eq('STUSPS', 'AL')) In\u00a0[4]: Copied! <pre>leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> leaflet_map = basal.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) In\u00a0[5]: Copied! <pre>df=leaflet_map.addGEEData('AL')\ndf\n# .style \\\n#   .format(precision=3, thousands=\".\", decimal=\",\") \\\n#   .format_index(str.upper, axis=1)\n</pre> df=leaflet_map.addGEEData('AL') df # .style \\ #   .format(precision=3, thousands=\".\", decimal=\",\") \\ #   .format_index(str.upper, axis=1) Out[5]: <pre>{'max': {'treecover2000': 100},\n 'mean': {'treecover2000': 62.0600837382026},\n 'min': {'treecover2000': 0},\n 'std': {'treecover2000': 43.85990269986808},\n 'sum': {'treecover2000': 11165950540.913729}}</pre> In\u00a0[6]: Copied! <pre>import pandas as pd\n</pre> import pandas as pd In\u00a0[\u00a0]: Copied! <pre>label = {'max', 'mean', 'min', 'std', 'sum'}\n</pre> label = {'max', 'mean', 'min', 'std', 'sum'}  In\u00a0[\u00a0]: Copied! <pre>\n</pre> In\u00a0[7]: Copied! <pre>#list(df.keys())[0]\nlst = list(list(df.values()))#.values())\n</pre> #list(df.keys())[0] lst = list(list(df.values()))#.values()) In\u00a0[8]: Copied! <pre>df = pd.DataFrame(lst)\ndf.index = ['max', 'mean', 'min', 'std', 'sum']\ndf.columns = ['GEEMap Data']\ndf\n</pre> df = pd.DataFrame(lst) df.index = ['max', 'mean', 'min', 'std', 'sum'] df.columns = ['GEEMap Data'] df Out[8]: GEEMap Data max 1.000000e+02 mean 6.206008e+01 min 0.000000e+00 std 4.385990e+01 sum 1.116595e+10 In\u00a0[\u00a0]: Copied! <pre>dem = ee.Image('UMD/hansen/global_forest_change_2018_v1_6')#ee.ImageCollection('USGS/NLCD_RELEASES/2016_REL').mosaic()\n\nvis_params = {\n  'min': 0,\n  'max': 4000,\n  'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']}\n</pre> dem = ee.Image('UMD/hansen/global_forest_change_2018_v1_6')#ee.ImageCollection('USGS/NLCD_RELEASES/2016_REL').mosaic()  vis_params = {   'min': 0,   'max': 4000,   'palette': ['006633', 'E5FFCC', '662A00', 'D8D8D8', 'F5F5F5']} In\u00a0[\u00a0]: Copied! <pre>dem_f = dem.clip(st)\n</pre> dem_f = dem.clip(st) In\u00a0[\u00a0]: Copied! <pre>tile = leaflet_map.ee_tile_layer(dem_f.select('treecover2000'), vis_params)\n</pre> tile = leaflet_map.ee_tile_layer(dem_f.select('treecover2000'), vis_params) In\u00a0[\u00a0]: Copied! <pre>stats = geemap.image_stats(dem_f.select('treecover2000'), region =st, scale=30)\nstats.getInfo()\n</pre> stats = geemap.image_stats(dem_f.select('treecover2000'), region =st, scale=30) stats.getInfo() In\u00a0[\u00a0]: Copied! <pre>leaflet_map.add_layer(tile)\n</pre> leaflet_map.add_layer(tile) In\u00a0[\u00a0]: Copied! <pre>leaflet_map\n</pre> leaflet_map In\u00a0[\u00a0]: Copied! <pre>def ee_tile_layer(\n    ee_object, vis_params={}, name=\"Layer untitled\", shown=True, opacity=1.0\n):\n    \"\"\"Converts and Earth Engine layer to ipyleaflet TileLayer.\n    Args:\n        ee_object (Collection|Feature|Image|MapId): The object to add to the map.\n        vis_params (dict, optional): The visualization parameters. Defaults to {}.\n        name (str, optional): The name of the layer. Defaults to 'Layer untitled'.\n        shown (bool, optional): A flag indicating whether the layer should be on by default. Defaults to True.\n        opacity (float, optional): The layer's opacity represented as a number between 0 and 1. Defaults to 1.\n    \"\"\"\n\n    image = None\n\n    if (\n        not isinstance(ee_object, ee.Image)\n        and not isinstance(ee_object, ee.ImageCollection)\n        and not isinstance(ee_object, ee.FeatureCollection)\n        and not isinstance(ee_object, ee.Feature)\n        and not isinstance(ee_object, ee.Geometry)\n    ):\n        err_str = \"\\n\\nThe image argument in 'addLayer' function must be an instace of one of ee.Image, ee.Geometry, ee.Feature or ee.FeatureCollection.\"\n        raise AttributeError(err_str)\n\n    if (\n        isinstance(ee_object, ee.geometry.Geometry)\n        or isinstance(ee_object, ee.feature.Feature)\n        or isinstance(ee_object, ee.featurecollection.FeatureCollection)\n    ):\n        features = ee.FeatureCollection(ee_object)\n\n        width = 2\n\n        if \"width\" in vis_params:\n            width = vis_params[\"width\"]\n\n        color = \"000000\"\n\n        if \"color\" in vis_params:\n            color = vis_params[\"color\"]\n\n        image_fill = features.style(**{\"fillColor\": color}).updateMask(\n            ee.Image.constant(0.5)\n        )\n        image_outline = features.style(\n            **{\"color\": color, \"fillColor\": \"00000000\", \"width\": width}\n        )\n\n        image = image_fill.blend(image_outline)\n    elif isinstance(ee_object, ee.image.Image):\n        image = ee_object\n    elif isinstance(ee_object, ee.imagecollection.ImageCollection):\n        image = ee_object.mosaic()\n\n    map_id_dict = ee.Image(image).getMapId(vis_params)\n    tile_layer = TileLayer(\n        url=map_id_dict[\"tile_fetcher\"].url_format,\n        attribution=\"Google Earth Engine\",\n        name=name,\n        opacity=opacity,\n        visible=shown,\n    )\n    return tile_layer\n</pre> def ee_tile_layer(     ee_object, vis_params={}, name=\"Layer untitled\", shown=True, opacity=1.0 ):     \"\"\"Converts and Earth Engine layer to ipyleaflet TileLayer.     Args:         ee_object (Collection|Feature|Image|MapId): The object to add to the map.         vis_params (dict, optional): The visualization parameters. Defaults to {}.         name (str, optional): The name of the layer. Defaults to 'Layer untitled'.         shown (bool, optional): A flag indicating whether the layer should be on by default. Defaults to True.         opacity (float, optional): The layer's opacity represented as a number between 0 and 1. Defaults to 1.     \"\"\"      image = None      if (         not isinstance(ee_object, ee.Image)         and not isinstance(ee_object, ee.ImageCollection)         and not isinstance(ee_object, ee.FeatureCollection)         and not isinstance(ee_object, ee.Feature)         and not isinstance(ee_object, ee.Geometry)     ):         err_str = \"\\n\\nThe image argument in 'addLayer' function must be an instace of one of ee.Image, ee.Geometry, ee.Feature or ee.FeatureCollection.\"         raise AttributeError(err_str)      if (         isinstance(ee_object, ee.geometry.Geometry)         or isinstance(ee_object, ee.feature.Feature)         or isinstance(ee_object, ee.featurecollection.FeatureCollection)     ):         features = ee.FeatureCollection(ee_object)          width = 2          if \"width\" in vis_params:             width = vis_params[\"width\"]          color = \"000000\"          if \"color\" in vis_params:             color = vis_params[\"color\"]          image_fill = features.style(**{\"fillColor\": color}).updateMask(             ee.Image.constant(0.5)         )         image_outline = features.style(             **{\"color\": color, \"fillColor\": \"00000000\", \"width\": width}         )          image = image_fill.blend(image_outline)     elif isinstance(ee_object, ee.image.Image):         image = ee_object     elif isinstance(ee_object, ee.imagecollection.ImageCollection):         image = ee_object.mosaic()      map_id_dict = ee.Image(image).getMapId(vis_params)     tile_layer = TileLayer(         url=map_id_dict[\"tile_fetcher\"].url_format,         attribution=\"Google Earth Engine\",         name=name,         opacity=opacity,         visible=shown,     )     return tile_layer"},{"location":"examples/geosdemo/","title":"Geosdemo","text":"In\u00a0[\u00a0]: Copied! <pre>%pip install basal_and_bark\n</pre> %pip install basal_and_bark In\u00a0[1]: Copied! <pre>#import basal_and_bark\nimport basal_and_bark\n</pre> #import basal_and_bark import basal_and_bark In\u00a0[\u00a0]: Copied! <pre>#instantiate a basal_and_bark ipyleaflet map instance\n\nm = basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\ntype(m)\n</pre> #instantiate a basal_and_bark ipyleaflet map instance  m = basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) type(m)  In\u00a0[\u00a0]: Copied! <pre>basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) In\u00a0[\u00a0]: Copied! <pre>#add layer control to the basal_and_bark map\nbasal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True).add_layer_control()\n</pre> #add layer control to the basal_and_bark map basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True).add_layer_control()  In\u00a0[\u00a0]: Copied! <pre>basal_and_bark.generate_random_string(10)\n</pre> basal_and_bark.generate_random_string(10) In\u00a0[\u00a0]: Copied! <pre>#View the sample data\n#The data can be viewed and explored without adding it to the working map\nfile_location=\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\"\n\nb=basal_and_bark.view_data(file_location)\n\nb\n</pre> #View the sample data #The data can be viewed and explored without adding it to the working map file_location=\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\"  b=basal_and_bark.view_data(file_location)  b In\u00a0[\u00a0]: Copied! <pre>#add data to the working map\nfile_location=\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\"\nbasal_and_bark.add_data(m,file_location)\n</pre> #add data to the working map file_location=\"https://github.com/ZachDorm/basal_and_bark/raw/main/docs/examples/data/tl_2018_tn_county.zip\" basal_and_bark.add_data(m,file_location) In\u00a0[\u00a0]: Copied! <pre>basal_and_bark.add_basemap(m)\n</pre> basal_and_bark.add_basemap(m) In\u00a0[\u00a0]: Copied! <pre># basal_and_bark.Map_Folium(location = [40,-100])\nbasal_and_bark.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13)\n</pre> # basal_and_bark.Map_Folium(location = [40,-100]) basal_and_bark.Map_Folium(location = [40,-100], tiles=\"Stamen Terrain\", zoom_start=13)"},{"location":"examples/intr/","title":"Intr","text":"<p>Add badge here</p> In\u00a0[1]: Copied! <pre>import basal_and_bark\n</pre> import basal_and_bark In\u00a0[2]: Copied! <pre>basal_and_bark.generate_random_string(16)\n</pre> basal_and_bark.generate_random_string(16) Out[2]: <pre>'okvnohprbxthcijo'</pre> In\u00a0[3]: Copied! <pre>basal_and_bark.generate_lucky_number(1)\n</pre> basal_and_bark.generate_lucky_number(1) Out[3]: <pre>'4'</pre> In\u00a0[\u00a0]: Copied! <pre>#import basal_and_bark\n#pip instal l -e .\n#pip install git+https://github.com/giswqs/geosdemo.git\n</pre> #import basal_and_bark #pip instal l -e . #pip install git+https://github.com/giswqs/geosdemo.git"},{"location":"examples/ipyleaflet/","title":"Ipyleaflet","text":"In\u00a0[3]: Copied! <pre>from ipyleaflet import Map, basemaps, basemap_to_tiles\n\nm = Map(\n    basemap=basemap_to_tiles(basemaps.OpenTopoMap),\n    center=(52.204793, 360.121558),\n    zoom=4\n)\n\nm\n</pre> from ipyleaflet import Map, basemaps, basemap_to_tiles  m = Map(     basemap=basemap_to_tiles(basemaps.OpenTopoMap),     center=(52.204793, 360.121558),     zoom=4 )  m <pre>Map(center=[52.204793, 360.121558], controls=(ZoomControl(options=['position', 'zoom_in_text', 'zoom_in_title'\u2026</pre> In\u00a0[2]: Copied! <pre>m.clear_layers()\n</pre> m.clear_layers()"},{"location":"examples/rasters/","title":"Rasters and Static Images","text":"<p>Import basal_and_bark package</p> In\u00a0[\u00a0]: Copied! <pre>%pip install basal_and_bark\n%pip install httpx\n</pre> %pip install basal_and_bark %pip install httpx In\u00a0[1]: Copied! <pre>import basal_and_bark\nfrom basal_and_bark import basal_and_bark\n</pre> import basal_and_bark from basal_and_bark import basal_and_bark <p>Create a basal_and_bark Map object.</p> In\u00a0[2]: Copied! <pre>m=basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True)\n</pre> m=basal_and_bark.Map(center = [40,-100], zoom = 4, test = \"test\", scroll_wheel_zoom = True) <p>Url of desired raster image:</p> In\u00a0[3]: Copied! <pre>url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\"\n</pre> url = \"https://opendata.digitalglobe.com/events/mauritius-oil-spill/post-event/2020-08-12/105001001F1B5B00/105001001F1B5B00.tif\" <p>Add the raster.</p> In\u00a0[4]: Copied! <pre>m.add_raster(url)\n</pre> m.add_raster(url) In\u00a0[\u00a0]: Copied! <pre>m\n</pre> m <p>Add a static image to the map.</p> In\u00a0[6]: Copied! <pre>m.add_image(\"https://wvstateparks.com/wp-content/uploads/2017/03/Ascend-WV-Brand-Photo-Coopers-Rock-State-Forest-Morgantown-scaled.jpg\")\n</pre> m.add_image(\"https://wvstateparks.com/wp-content/uploads/2017/03/Ascend-WV-Brand-Photo-Coopers-Rock-State-Forest-Morgantown-scaled.jpg\")"},{"location":"examples/rasters/#rasters-and-static-images","title":"Rasters and Static Images\u00b6","text":""}]}